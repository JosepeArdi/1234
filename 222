 test_category_page_pub_date_later_today ___________

user_client = <django.test.client.Client object at 0x7f4a1598eac0>
posts_with_future_date = [<Post: Officer Soon Hour Ability Sound Own>, <Post: Follow Develop Report Many Nearly West>, <Post: Radio Dinner Music National Never Company>, <Post: War Room Movement First Bring Require>]
category_page_post_list_context_key = 'post_list'

    def test_category_page_pub_date_later_today(
            user_client,
            posts_with_future_date,
            category_page_post_list_context_key
    ):
        if not posts_with_future_date[0].category:
>           raise AssertionError(
                'В модели `Post` в атрибуте `category` '
                'проверьте значение параметра `blank` на соответствие заданию.')
E           AssertionError: В модели `Post` в атрибуте `category` проверьте значение параметра `blank` на соответствие заданию.

tests/test_category_page_views.py:99: AssertionError
___________ test_posts_page_pk_pub_date_later_today ___________

user_client = <django.test.client.Client object at 0x7f4a1562eb20>
post_with_future_date = <Post: Religious To Nation Certainly Campaign Sister>

    def test_posts_page_pk_pub_date_later_today(
            user_client, post_with_future_date):
>       response = user_client.get(f'/posts/{post_with_future_date.id}/')

tests/test_post_detail_views.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv/lib/python3.8/site-packages/django/test/client.py:742: in get
    response = super().get(path, data=data, secure=secure, **extra)
venv/lib/python3.8/site-packages/django/test/client.py:396: in get
    return self.generic('GET', path, secure=secure, **{
venv/lib/python3.8/site-packages/django/test/client.py:473: in generic
    return self.request(**r)
venv/lib/python3.8/site-packages/django/test/client.py:719: in request
    self.check_exception(response)
venv/lib/python3.8/site-packages/django/test/client.py:580: in check_exception
    raise exc_value
venv/lib/python3.8/site-packages/django/core/handlers/exception.py:47: in inner
    response = get_response(request)
venv/lib/python3.8/site-packages/django/core/handlers/base.py:181: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
blogicum/blog/views.py:31: in post_detail
    return render(request, template, context)
venv/lib/python3.8/site-packages/django/shortcuts.py:19: in render
    content = loader.render_to_string(template_name, context, request, using=using)
venv/lib/python3.8/site-packages/django/template/loader.py:62: in render_to_string
    return template.render(context, request)
venv/lib/python3.8/site-packages/django/template/backends/django.py:61: in render
    return self.template.render(context)
venv/lib/python3.8/site-packages/django/template/base.py:170: in render
    return self._render(context)
venv/lib/python3.8/site-packages/django/test/utils.py:100: in instrumented_test_render
    return self.nodelist.render(context)
venv/lib/python3.8/site-packages/django/template/base.py:938: in render
    bit = node.render_annotated(context)
venv/lib/python3.8/site-packages/django/template/base.py:905: in render_annotated
    return self.render(context)
venv/lib/python3.8/site-packages/django/template/loader_tags.py:150: in render
    return compiled_parent._render(context)
venv/lib/python3.8/site-packages/django/test/utils.py:100: in instrumented_test_render
    return self.nodelist.render(context)
venv/lib/python3.8/site-packages/django/template/base.py:938: in render
    bit = node.render_annotated(context)
venv/lib/python3.8/site-packages/django/template/base.py:905: in render_annotated
    return self.render(context)
venv/lib/python3.8/site-packages/django/template/loader_tags.py:62: in render
    result = block.nodelist.render(context)
venv/lib/python3.8/site-packages/django/template/base.py:938: in render
    bit = node.render_annotated(context)
venv/lib/python3.8/site-packages/django/template/base.py:905: in render_annotated
    return self.render(context)
venv/lib/python3.8/site-packages/django/template/loader_tags.py:195: in render
    return template.render(context)
venv/lib/python3.8/site-packages/django/template/base.py:172: in render
    return self._render(context)
venv/lib/python3.8/site-packages/django/test/utils.py:100: in instrumented_test_render
    return self.nodelist.render(context)
venv/lib/python3.8/site-packages/django/template/base.py:938: in render
    bit = node.render_annotated(context)
venv/lib/python3.8/site-packages/django/template/base.py:905: in render_annotated
    return self.render(context)
venv/lib/python3.8/site-packages/django/template/defaulttags.py:449: in render
    url = reverse(view_name, args=args, kwargs=kwargs, current_app=current_app)
venv/lib/python3.8/site-packages/django/urls/base.py:86: in reverse
    return resolver._reverse_with_prefix(view, prefix, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <URLResolver <module 'blog.urls' from '/home/jose/Dev/django_sprint3/blogicum/blog/urls.py'> (blog:blog) ''>
lookup_view = 'category_posts', _prefix = '/', args = ('',)
kwargs = {}
possibilities = [([('category/%(slug)s/', ['slug'])], 'category/(?P<slug>[-a-zA-Z0-9_]+)/\\Z', {}, {'slug': <django.urls.converters.SlugConverter object at 0x7f4a1693c790>})]
possibility = [('category/%(slug)s/', ['slug'])]
pattern = 'category/(?P<slug>[-a-zA-Z0-9_]+)/\\Z'
defaults = {}
converters = {'slug': <django.urls.converters.SlugConverter object at 0x7f4a1693c790>}
result = 'category/%(slug)s/', params = ['slug']
candidate_subs = {'slug': ''}
text_candidate_subs = {'slug': ''}, match = True

    def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):
        if args and kwargs:
            raise ValueError("Don't mix *args and **kwargs in call to reverse()!")
    
        if not self._populated:
            self._populate()
    
        possibilities = self.reverse_dict.getlist(lookup_view)
    
        for possibility, pattern, defaults, converters in possibilities:
            for result, params in possibility:
                if args:
                    if len(args) != len(params):
                        continue
                    candidate_subs = dict(zip(params, args))
                else:
                    if set(kwargs).symmetric_difference(params).difference(defaults):
                        continue
                    if any(kwargs.get(k, v) != v for k, v in defaults.items()):
                        continue
                    candidate_subs = kwargs
                # Convert the candidate subs to text using Converter.to_url().
                text_candidate_subs = {}
                match = True
                for k, v in candidate_subs.items():
                    if k in converters:
                        try:
                            text_candidate_subs[k] = converters[k].to_url(v)
                        except ValueError:
                            match = False
                            break
                    else:
                        text_candidate_subs[k] = str(v)
                if not match:
                    continue
                # WSGI provides decoded URLs, without %xx escapes, and the URL
                # resolver operates on such URLs. First substitute arguments
                # without quoting to build a decoded URL and look for a match.
                # Then, if we have a match, redo the substitution with quoted
                # arguments in order to return a properly encoded URL.
                candidate_pat = _prefix.replace('%', '%%') + result
                if re.search('^%s%s' % (re.escape(_prefix), pattern), candidate_pat % text_candidate_subs):
                    # safe characters from `pchar` definition of RFC 3986
                    url = quote(candidate_pat % text_candidate_subs, safe=RFC3986_SUBDELIMS + '/~:@')
                    # Don't allow construction of scheme relative urls.
                    return escape_leading_slashes(url)
        # lookup_view can be URL name or callable, but callables are not
        # friendly in error messages.
        m = getattr(lookup_view, '__module__', None)
        n = getattr(lookup_view, '__name__', None)
        if m is not None and n is not None:
            lookup_view_s = "%s.%s" % (m, n)
        else:
            lookup_view_s = lookup_view
    
        patterns = [pattern for (_, pattern, _, _) in possibilities]
        if patterns:
            if args:
                arg_msg = "arguments '%s'" % (args,)
            elif kwargs:
                arg_msg = "keyword arguments '%s'" % kwargs
            else:
                arg_msg = "no arguments"
            msg = (
                "Reverse for '%s' with %s not found. %d pattern(s) tried: %s" %
                (lookup_view_s, arg_msg, len(patterns), patterns)
            )
        else:
            msg = (
                "Reverse for '%(view)s' not found. '%(view)s' is not "
                "a valid view function or pattern name." % {'view': lookup_view_s}
            )
>       raise NoReverseMatch(msg)
E       django.urls.exceptions.NoReverseMatch: Reverse for 'category_posts' with arguments '('',)' not found. 1 pattern(s) tried: ['category/(?P<slug>[-a-zA-Z0-9_]+)/\\Z']

venv/lib/python3.8/site-packages/django/urls/resolvers.py:698: NoReverseMatch
-------------------- Captured stderr call ---------------------
Internal Server Error: /posts/1/
Traceback (most recent call last):
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/core/handlers/exception.py", line 47, in inner
    response = get_response(request)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/core/handlers/base.py", line 181, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/jose/Dev/django_sprint3/blogicum/blog/views.py", line 31, in post_detail
    return render(request, template, context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/shortcuts.py", line 19, in render
    content = loader.render_to_string(template_name, context, request, using=using)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/loader.py", line 62, in render_to_string
    return template.render(context, request)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/backends/django.py", line 61, in render
    return self.template.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 170, in render
    return self._render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/test/utils.py", line 100, in instrumented_test_render
    return self.nodelist.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 938, in render
    bit = node.render_annotated(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 905, in render_annotated
    return self.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/loader_tags.py", line 150, in render
    return compiled_parent._render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/test/utils.py", line 100, in instrumented_test_render
    return self.nodelist.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 938, in render
    bit = node.render_annotated(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 905, in render_annotated
    return self.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/loader_tags.py", line 62, in render
    result = block.nodelist.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 938, in render
    bit = node.render_annotated(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 905, in render_annotated
    return self.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/loader_tags.py", line 195, in render
    return template.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 172, in render
    return self._render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/test/utils.py", line 100, in instrumented_test_render
    return self.nodelist.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 938, in render
    bit = node.render_annotated(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 905, in render_annotated
    return self.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/defaulttags.py", line 449, in render
    url = reverse(view_name, args=args, kwargs=kwargs, current_app=current_app)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/urls/base.py", line 86, in reverse
    return resolver._reverse_with_prefix(view, prefix, *args, **kwargs)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/urls/resolvers.py", line 698, in _reverse_with_prefix
    raise NoReverseMatch(msg)
django.urls.exceptions.NoReverseMatch: Reverse for 'category_posts' with arguments '('',)' not found. 1 pattern(s) tried: ['category/(?P<slug>[-a-zA-Z0-9_]+)/\\Z']
---------------------- Captured log call ----------------------
ERROR    django.request:log.py:224 Internal Server Error: /posts/1/
Traceback (most recent call last):
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/core/handlers/exception.py", line 47, in inner
    response = get_response(request)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/core/handlers/base.py", line 181, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/jose/Dev/django_sprint3/blogicum/blog/views.py", line 31, in post_detail
    return render(request, template, context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/shortcuts.py", line 19, in render
    content = loader.render_to_string(template_name, context, request, using=using)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/loader.py", line 62, in render_to_string
    return template.render(context, request)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/backends/django.py", line 61, in render
    return self.template.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 170, in render
    return self._render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/test/utils.py", line 100, in instrumented_test_render
    return self.nodelist.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 938, in render
    bit = node.render_annotated(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 905, in render_annotated
    return self.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/loader_tags.py", line 150, in render
    return compiled_parent._render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/test/utils.py", line 100, in instrumented_test_render
    return self.nodelist.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 938, in render
    bit = node.render_annotated(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 905, in render_annotated
    return self.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/loader_tags.py", line 62, in render
    result = block.nodelist.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 938, in render
    bit = node.render_annotated(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 905, in render_annotated
    return self.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/loader_tags.py", line 195, in render
    return template.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 172, in render
    return self._render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/test/utils.py", line 100, in instrumented_test_render
    return self.nodelist.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 938, in render
    bit = node.render_annotated(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/base.py", line 905, in render_annotated
    return self.render(context)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/template/defaulttags.py", line 449, in render
    url = reverse(view_name, args=args, kwargs=kwargs, current_app=current_app)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/urls/base.py", line 86, in reverse
    return resolver._reverse_with_prefix(view, prefix, *args, **kwargs)
  File "/home/jose/Dev/django_sprint3/venv/lib/python3.8/site-packages/django/urls/resolvers.py", line 698, in _reverse_with_prefix
    raise NoReverseMatch(msg)
django.urls.exceptions.NoReverseMatch: Reverse for 'category_posts' with arguments '('',)' not found. 1 pattern(s) tried: ['category/(?P<slug>[-a-zA-Z0-9_]+)/\\Z']
___________ test_posts_page_pk_category_unpublished ___________

user_client = <django.test.client.Client object at 0x7f4a15d0d9d0>
post_with_unpublished_category = <Post: Rule Catch Movie Item Senior Skill>

    def test_posts_page_pk_category_unpublished(
            user_client,
            post_with_unpublished_category,
    ):
        response = user_client.get(f'/posts/{post_with_unpublished_category.id}/')
>       assert response.status_code == HTTPStatus.NOT_FOUND, (
            'Убедитесь, что если посту присвоена категория, снятая с публикации, '
            'то отдельная страница этого поста возвращает статус 404.'
        )
E       AssertionError: Убедитесь, что если посту присвоена категория, снятая с публикации, то отдельная страница этого поста возвращает статус 404.
E       assert 200 == <HTTPStatus.NOT_FOUND: 404>
E        +  where 200 = <HttpResponse status_code=200, "text/html; charset=utf-8">.status_code
E        +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests/test_post_detail_views.py:114: AssertionError
_ TestPostModelAttrs.test_model_attrs[category-ForeignKey-params5] _

self = <test_post_model.TestPostModelAttrs object at 0x7f4a15ed6fd0>
field = 'category'
type = <class 'django.db.models.fields.related.ForeignKey'>
params = {'blank': False, 'null': True}

    def test_model_attrs(self, field, type, params):
        model_name = self.model.__name__
        assert hasattr(self.model, field), (
            f'В модели `{model_name}` укажите атрибут `{field}`.')
        model_field = self.model._meta.get_field(field)
        assert isinstance(model_field, type), (
            f'В модели `{model_name}` у атрибута `{field}` '
            f'укажите тип `{type}`.'
        )
        for param, value_param in params.items():
            display_name = self.get_parameter_display_name(param)
            assert param in model_field.__dict__, (
                f'В модели `{model_name}` для атрибута `{field}` '
                f'укажите параметр `{display_name}`.'
            )
>           assert model_field.__dict__.get(param) == value_param, (
                f'В модели `{model_name}` в атрибуте `{field}` '
                f'проверьте значение параметра `{display_name}` '
                'на соответствие заданию.'
            )
E           AssertionError: В модели `Post` в атрибуте `category` проверьте значение параметра `blank` на соответствие заданию.
E           assert True == False
E            +  where True = <built-in method get of dict object at 0x7f4a1757da00>('blank')
E            +    where <built-in method get of dict object at 0x7f4a1757da00> = {'_db_tablespace': None, '_error_messages': None, '_get_default': <function return_None at 0x7f4a16a83160>, '_unique': False, ...}.get
E            +      where {'_db_tablespace': None, '_error_messages': None, '_get_default': <function return_None at 0x7f4a16a83160>, '_unique': False, ...} = <django.db.models.fields.related.ForeignKey: category>.__dict__

tests/conftest.py:174: AssertionError
_ test_models_params_translate[Category-slug-\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440] _

n_model = 'Category', param = 'slug'
n_verbose = 'Идентификатор'

    @pytest.mark.parametrize(('n_model', 'param', 'n_verbose'), [
        ('Category', 'is_published', 'Опубликовано'),
        ('Category', 'title', 'Заголовок'),
        ('Category', 'slug', 'Идентификатор'),
        ('Category', 'description', 'Описание'),
        ('Category', 'created_at', 'Добавлено'),
        ('Location', 'name', 'Название места'),
        ('Location', 'created_at', 'Добавлено'),
        ('Location', 'is_published', 'Опубликовано'),
        ('Post', 'pub_date', 'Дата и время публикации'),
        ('Post', 'text', 'Текст'),
        ('Post', 'author', 'Автор публикации'),
        ('Post', 'category', 'Категория'),
        ('Post', 'location', 'Местоположение'),
        ('Post', 'created_at', 'Добавлено'),
        ('Post', 'is_published', 'Опубликовано'),
    ])
    def test_models_params_translate(n_model, param, n_verbose):
        module = importlib.import_module('blog.models')
        model = getattr(module, n_model)
        field = model._meta.get_field(param)
>       assert field.verbose_name == n_verbose, (
            f'Убедитесь, что в модели `{n_model}` значение `verbose_name` '
            f' для атрибута `{param}` '
            'установлено в соответствии с заданием.'
        )
E       AssertionError: Убедитесь, что в модели `Category` значение `verbose_name`  для атрибута `slug` установлено в соответствии с заданием.
E       assert 'Слаг' == 'Идентификатор'
E         - Идентификатор
E         + Слаг

tests/test_localization.py:75: AssertionError
_ test_models_params_translate[Category-created_at-\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e] _

n_model = 'Category', param = 'created_at'
n_verbose = 'Добавлено'

    @pytest.mark.parametrize(('n_model', 'param', 'n_verbose'), [
        ('Category', 'is_published', 'Опубликовано'),
        ('Category', 'title', 'Заголовок'),
        ('Category', 'slug', 'Идентификатор'),
        ('Category', 'description', 'Описание'),
        ('Category', 'created_at', 'Добавлено'),
        ('Location', 'name', 'Название места'),
        ('Location', 'created_at', 'Добавлено'),
        ('Location', 'is_published', 'Опубликовано'),
        ('Post', 'pub_date', 'Дата и время публикации'),
        ('Post', 'text', 'Текст'),
        ('Post', 'author', 'Автор публикации'),
        ('Post', 'category', 'Категория'),
        ('Post', 'location', 'Местоположение'),
        ('Post', 'created_at', 'Добавлено'),
        ('Post', 'is_published', 'Опубликовано'),
    ])
    def test_models_params_translate(n_model, param, n_verbose):
        module = importlib.import_module('blog.models')
        model = getattr(module, n_model)
        field = model._meta.get_field(param)
>       assert field.verbose_name == n_verbose, (
            f'Убедитесь, что в модели `{n_model}` значение `verbose_name` '
            f' для атрибута `{param}` '
            'установлено в соответствии с заданием.'
        )
E       AssertionError: Убедитесь, что в модели `Category` значение `verbose_name`  для атрибута `created_at` установлено в соответствии с заданием.
E       assert 'created at' == 'Добавлено'
E         - Добавлено
E         + created at

tests/test_localization.py:75: AssertionError
_ test_models_params_translate[Location-created_at-\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e] _

n_model = 'Location', param = 'created_at'
n_verbose = 'Добавлено'

    @pytest.mark.parametrize(('n_model', 'param', 'n_verbose'), [
        ('Category', 'is_published', 'Опубликовано'),
        ('Category', 'title', 'Заголовок'),
        ('Category', 'slug', 'Идентификатор'),
        ('Category', 'description', 'Описание'),
        ('Category', 'created_at', 'Добавлено'),
        ('Location', 'name', 'Название места'),
        ('Location', 'created_at', 'Добавлено'),
        ('Location', 'is_published', 'Опубликовано'),
        ('Post', 'pub_date', 'Дата и время публикации'),
        ('Post', 'text', 'Текст'),
        ('Post', 'author', 'Автор публикации'),
        ('Post', 'category', 'Категория'),
        ('Post', 'location', 'Местоположение'),
        ('Post', 'created_at', 'Добавлено'),
        ('Post', 'is_published', 'Опубликовано'),
    ])
    def test_models_params_translate(n_model, param, n_verbose):
        module = importlib.import_module('blog.models')
        model = getattr(module, n_model)
        field = model._meta.get_field(param)
>       assert field.verbose_name == n_verbose, (
            f'Убедитесь, что в модели `{n_model}` значение `verbose_name` '
            f' для атрибута `{param}` '
            'установлено в соответствии с заданием.'
        )
E       AssertionError: Убедитесь, что в модели `Location` значение `verbose_name`  для атрибута `created_at` установлено в соответствии с заданием.
E       assert 'created at' == 'Добавлено'
E         - Добавлено
E         + created at

tests/test_localization.py:75: AssertionError
_ test_models_params_translate[Post-author-\u0410\u0432\u0442\u043e\u0440 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438] _

n_model = 'Post', param = 'author'
n_verbose = 'Автор публикации'

    @pytest.mark.parametrize(('n_model', 'param', 'n_verbose'), [
        ('Category', 'is_published', 'Опубликовано'),
        ('Category', 'title', 'Заголовок'),
        ('Category', 'slug', 'Идентификатор'),
        ('Category', 'description', 'Описание'),
        ('Category', 'created_at', 'Добавлено'),
        ('Location', 'name', 'Название места'),
        ('Location', 'created_at', 'Добавлено'),
        ('Location', 'is_published', 'Опубликовано'),
        ('Post', 'pub_date', 'Дата и время публикации'),
        ('Post', 'text', 'Текст'),
        ('Post', 'author', 'Автор публикации'),
        ('Post', 'category', 'Категория'),
        ('Post', 'location', 'Местоположение'),
        ('Post', 'created_at', 'Добавлено'),
        ('Post', 'is_published', 'Опубликовано'),
    ])
    def test_models_params_translate(n_model, param, n_verbose):
        module = importlib.import_module('blog.models')
        model = getattr(module, n_model)
        field = model._meta.get_field(param)
>       assert field.verbose_name == n_verbose, (
            f'Убедитесь, что в модели `{n_model}` значение `verbose_name` '
            f' для атрибута `{param}` '
            'установлено в соответствии с заданием.'
        )
E       AssertionError: Убедитесь, что в модели `Post` значение `verbose_name`  для атрибута `author` установлено в соответствии с заданием.
E       assert 'Автор Публикации' == 'Автор публикации'
E         - Автор публикации
E         ?       ^
E         + Автор Публикации
E         ?       ^

tests/test_localization.py:75: AssertionError
_ test_models_params_translate[Post-created_at-\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e] _

n_model = 'Post', param = 'created_at', n_verbose = 'Добавлено'

    @pytest.mark.parametrize(('n_model', 'param', 'n_verbose'), [
        ('Category', 'is_published', 'Опубликовано'),
        ('Category', 'title', 'Заголовок'),
        ('Category', 'slug', 'Идентификатор'),
        ('Category', 'description', 'Описание'),
        ('Category', 'created_at', 'Добавлено'),
        ('Location', 'name', 'Название места'),
        ('Location', 'created_at', 'Добавлено'),
        ('Location', 'is_published', 'Опубликовано'),
        ('Post', 'pub_date', 'Дата и время публикации'),
        ('Post', 'text', 'Текст'),
        ('Post', 'author', 'Автор публикации'),
        ('Post', 'category', 'Категория'),
        ('Post', 'location', 'Местоположение'),
        ('Post', 'created_at', 'Добавлено'),
        ('Post', 'is_published', 'Опубликовано'),
    ])
    def test_models_params_translate(n_model, param, n_verbose):
        module = importlib.import_module('blog.models')
        model = getattr(module, n_model)
        field = model._meta.get_field(param)
>       assert field.verbose_name == n_verbose, (
            f'Убедитесь, что в модели `{n_model}` значение `verbose_name` '
            f' для атрибута `{param}` '
            'установлено в соответствии с заданием.'
        )
E       AssertionError: Убедитесь, что в модели `Post` значение `verbose_name`  для атрибута `created_at` установлено в соответствии с заданием.
E       assert 'created at' == 'Добавлено'
E         - Добавлено
E         + created at

tests/test_localization.py:75: AssertionError
_ test_help_text_translate[Category-slug-\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043b\u044f URL; \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043b\u0430\u0442\u0438\u043d\u0438\u0446\u044b, \u0446\u0438\u0444\u0440\u044b, \u0434\u0435\u0444\u0438\u0441 \u0438 \u043f\u043e\u0434\u0447\u0451\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u0435.] _

n_model = 'Category', param = 'slug'
text = 'Идентификатор страницы для URL; разрешены символы латиницы, цифры, дефис и подчёркивание.'

    @pytest.mark.parametrize(('n_model', 'param', 'text'), [
        (
            'Category',
            'is_published',
            'Снимите галочку, чтобы скрыть публикацию.'
        ),
        (
            'Category',
            'slug',
            'Идентификатор страницы для URL; '
            'разрешены символы латиницы, цифры, дефис и подчёркивание.'
        ),
        (
            'Post',
            'pub_date',
            'Если установить дату и время в будущем — '
            'можно делать отложенные публикации.'
        ),
    ])
    def test_help_text_translate(n_model, param, text):
        module = importlib.import_module('blog.models')
        model = getattr(module, n_model)
        field = model._meta.get_field(param)
>       assert field.help_text == text, (
            f'Убедитесь, что в модели `{n_model}` значение `help_text` '
            f'для атрибута `{param}` '
            'установлено в соответствии с заданием.'
        )
E       AssertionError: Убедитесь, что в модели `Category` значение `help_text` для атрибута `slug` установлено в соответствии с заданием.
E       assert ('Идентификатор страницы для URL;разрешены символы латиницы, цифры, дефис и '\n 'подчёркивание.') == ('Идентификатор страницы для URL; разрешены символы латиницы, цифры, дефис и '\n 'подчёркивание.')
E         - Идентификатор страницы для URL; разрешены символы латиницы, цифры, дефис и подчёркивание.
E         ?                                -
E         + Идентификатор страницы для URL;разрешены символы латиницы, цифры, дефис и подчёркивание.

tests/test_localization.py:105: AssertionError
_ test_help_text_translate[Post-pub_date-\u0415\u0441\u043b\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u2014 \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438.] _

n_model = 'Post', param = 'pub_date'
text = 'Если установить дату и время в будущем — можно делать отложенные публикации.'

    @pytest.mark.parametrize(('n_model', 'param', 'text'), [
        (
            'Category',
            'is_published',
            'Снимите галочку, чтобы скрыть публикацию.'
        ),
        (
            'Category',
            'slug',
            'Идентификатор страницы для URL; '
            'разрешены символы латиницы, цифры, дефис и подчёркивание.'
        ),
        (
            'Post',
            'pub_date',
            'Если установить дату и время в будущем — '
            'можно делать отложенные публикации.'
        ),
    ])
    def test_help_text_translate(n_model, param, text):
        module = importlib.import_module('blog.models')
        model = getattr(module, n_model)
        field = model._meta.get_field(param)
>       assert field.help_text == text, (
            f'Убедитесь, что в модели `{n_model}` значение `help_text` '
            f'для атрибута `{param}` '
            'установлено в соответствии с заданием.'
        )
E       AssertionError: Убедитесь, что в модели `Post` значение `help_text` для атрибута `pub_date` установлено в соответствии с заданием.
E       assert 'Если установить дату и время в будущем — можно делатьотложенные публикации.' == 'Если установить дату и время в будущем — можно делать отложенные публикации.'
E         - Если установить дату и время в будущем — можно делать отложенные публикации.
E         ?                                                      -
E         + Если установить дату и время в будущем — можно делатьотложенные публикации.

tests/test_localization.py:105: AssertionError
=================== short test summary info ===================
FAILED tests/test_category_page_views.py::test_category_page_pub_date_later_today
FAILED tests/test_post_detail_views.py::test_posts_page_pk_pub_date_later_today
FAILED tests/test_post_detail_views.py::test_posts_page_pk_category_unpublished
FAILED tests/test_post_model.py::TestPostModelAttrs::test_model_attrs[category-ForeignKey-params5]
FAILED tests/test_localization.py::test_models_params_translate[Category-slug-\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440]
FAILED tests/test_localization.py::test_models_params_translate[Category-created_at-\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e]
FAILED tests/test_localization.py::test_models_params_translate[Location-created_at-\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e]
FAILED tests/test_localization.py::test_models_params_translate[Post-author-\u0410\u0432\u0442\u043e\u0440 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438]
FAILED tests/test_localization.py::test_models_params_translate[Post-created_at-\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e]
FAILED tests/test_localization.py::test_help_text_translate[Category-slug-\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u043b\u044f URL; \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043b\u0430\u0442\u0438\u043d\u0438\u0446\u044b, \u0446\u0438\u0444\u0440\u044b, \u0434\u0435\u0444\u0438\u0441 \u0438 \u043f\u043e\u0434\u0447\u0451\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u0435.]
FAILED tests/test_localization.py::test_help_text_translate[Post-pub_date-\u0415\u0441\u043b\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u2014 \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438.]
================ 11 failed, 71 passed in 2.94s ================
(venv) jose@jose-VirtualBox:~/Dev/django_sprint3$ 
