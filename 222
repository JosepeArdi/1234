========================================================================== FAILURES ===========================================================================
___________________________________________________________ test_category_page_pub_date_later_today ___________________________________________________________

user_client = <django.test.client.Client object at 0x7faf954e4af0>
posts_with_future_date = [<Post: On Above Worry Also Employee Member>, <Post: Bad Responsibility Party Size Science Increase>, <Post: Board Experience Image Try Group Agreement>, <Post: Sister Year Near Couple Feel Action>]
category_page_post_list_context_key = 'post_list'

    def test_category_page_pub_date_later_today(
            user_client,
            posts_with_future_date,
            category_page_post_list_context_key
    ):
        if not posts_with_future_date[0].category:
            raise AssertionError(
                'В модели `Post` в атрибуте `category` '
                'проверьте значение параметра `blank` на соответствие заданию.')
        category_slug = posts_with_future_date[0].category.slug
        response = user_client.get(f'/category/{category_slug}/')
        if response.status_code == HTTPStatus.OK:
            context_post_list = response.context.get(
                category_page_post_list_context_key)
>           assert len(context_post_list) == 0, (
                'Убедитесь, что на странице категории '
                'не выводятся записи с датой публикации в будущем.'
            )
E           AssertionError: Убедитесь, что на странице категории не выводятся записи с датой публикации в будущем.
E           assert 1 == 0
E            +  where 1 = len(<QuerySet [<Post: On Above Worry Also Employee Member>]>)

tests/test_category_page_views.py:107: AssertionError
_____________________________________________________________ test_posts_page_pk_unpublished_post _____________________________________________________________

user_client = <django.test.client.Client object at 0x7faf951a7a30>, unpublished_post = <Post: Guy Explain Important Among Wear Summer>

    def test_posts_page_pk_unpublished_post(user_client, unpublished_post):
        response = user_client.get(f'/posts/{unpublished_post.id}/')
>       assert response.status_code == HTTPStatus.NOT_FOUND, (
            'Убедитесь, что страница поста, снятого с публикации, '
            'возвращает статус 404.'
        )
E       AssertionError: Убедитесь, что страница поста, снятого с публикации, возвращает статус 404.
E       assert 200 == <HTTPStatus.NOT_FOUND: 404>
E        +  where 200 = <HttpResponse status_code=200, "text/html; charset=utf-8">.status_code
E        +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests/test_post_detail_views.py:94: AssertionError
___________________________________________________________ test_posts_page_pk_pub_date_later_today ___________________________________________________________

user_client = <django.test.client.Client object at 0x7faf951c7fd0>, post_with_future_date = <Post: Focus Too Public Allow Strategy Lawyer>

    def test_posts_page_pk_pub_date_later_today(
            user_client, post_with_future_date):
        response = user_client.get(f'/posts/{post_with_future_date.id}/')
>       assert response.status_code == HTTPStatus.NOT_FOUND, (
            'Убедитесь, что если для поста дата публикации установлена в будущем, '
            'отдельная страница такого поста возвращает статус 404.'
        )
E       AssertionError: Убедитесь, что если для поста дата публикации установлена в будущем, отдельная страница такого поста возвращает статус 404.
E       assert 200 == <HTTPStatus.NOT_FOUND: 404>
E        +  where 200 = <HttpResponse status_code=200, "text/html; charset=utf-8">.status_code
E        +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests/test_post_detail_views.py:103: AssertionError
___________________________________________________________ test_posts_page_pk_category_unpublished ___________________________________________________________

user_client = <django.test.client.Client object at 0x7faf951721c0>, post_with_unpublished_category = <Post: Challenge Late Body Way Remember Hundred>

    def test_posts_page_pk_category_unpublished(
            user_client,
            post_with_unpublished_category,
    ):
        response = user_client.get(f'/posts/{post_with_unpublished_category.id}/')
>       assert response.status_code == HTTPStatus.NOT_FOUND, (
            'Убедитесь, что если посту присвоена категория, снятая с публикации, '
            'то отдельная страница этого поста возвращает статус 404.'
        )
E       AssertionError: Убедитесь, что если посту присвоена категория, снятая с публикации, то отдельная страница этого поста возвращает статус 404.
E       assert 200 == <HTTPStatus.NOT_FOUND: 404>
E        +  where 200 = <HttpResponse status_code=200, "text/html; charset=utf-8">.status_code
E        +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests/test_post_detail_views.py:114: AssertionError
__________________________________________________________________ test_pub_date_later_today __________________________________________________________________

user_client = <django.test.client.Client object at 0x7faf94f7c190>
posts_with_future_date = [<Post: Compare Either Deal Camera Citizen Move>, <Post: Back How Increase Remember When Dream>, <Post: Few National Oil Change Get Pressure>, <Post: Population Second Table Behind Face Main>]
main_page_post_list_context_key = 'post_list'

    def test_pub_date_later_today(
            user_client, posts_with_future_date, main_page_post_list_context_key):
        response = user_client.get('/')
        context_post_list = response.context.get(main_page_post_list_context_key)
>       assert len(context_post_list) == 0, (
            'Если дата публикации поста позже текущего времени, '
            'он не должен отображаться на главной странице.'
        )
E       AssertionError: Если дата публикации поста позже текущего времени, он не должен отображаться на главной странице.
E       assert 4 == 0
E        +  where 4 = len(<QuerySet [<Post: Population Second Table Behind Face Main>, <Post: Few National Oil Change Get Pressure>, <Post: Back How Increase Remember When Dream>, <Post: Compare Either Deal Camera Citizen Move>]>)

tests/test_posts_page_views.py:84: AssertionError
